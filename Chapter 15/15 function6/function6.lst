     1                                  ; function5.asm
     2                                  BITS 64:
     3                                  extern printf
     4                                  section .data				
     5 00000000 41                      	first	db		"A"					
     6 00000001 42                      	second	db		"B"
     7 00000002 43                      	third	db		"C"
     8 00000003 44                      	fourth	db		"D"			
     9 00000004 45                      	fifth	db		"E"
    10 00000005 46                          sixth	db		"F"
    11 00000006 47                          seventh	db		"G"
    12 00000007 48                          eighth  db      "H"
    13 00000008 49                          ninth   db      "I"
    14 00000009 4A                          tenth   db      "J"
    15 0000000A 54686520737472696E-      	fmt		db		"The string is: %s",10,0 
    15 00000013 672069733A2025730A-
    15 0000001C 00                 
    16                                  section .bss
    17 00000000 <res Bh>                	flist resb	11      ; length of string plus end 0
    18                                  section .text									
    19                                  	global main						
    20                                  main:
    21 00000000 55                      	push rbp
    22 00000001 4889E5                      mov rbp, rsp
    23 00000004 48BF-                   	mov rdi, flist		; length			
    23 00000006 [0000000000000000] 
    24 0000000E 48BE-                   	mov rsi, first		; the correct registers
    24 00000010 [0000000000000000] 
    25 00000018 48BA-                   	mov rdx, second
    25 0000001A [0100000000000000] 
    26 00000022 48B9-                   	mov rcx, third			
    26 00000024 [0200000000000000] 
    27 0000002C 49B8-                   	mov r8, fourth
    27 0000002E [0300000000000000] 
    28 00000036 49B9-                       mov r9, fifth
    28 00000038 [0400000000000000] 
    29 00000040 68[09000000]                push tenth			; now start pushing in reverse order
    30 00000045 68[08000000]                push ninth			
    31 0000004A 68[07000000]                push eighth
    32 0000004F 68[06000000]                push seventh
    33 00000054 68[05000000]            	push sixth
    34 00000059 E822000000              	call lfunc			; call the function
    35                                  	; print the result
    36 0000005E 48BF-                   	mov rdi, fmt
    36 00000060 [0A00000000000000] 
    37 00000068 48BE-                       mov rsi, flist
    37 0000006A [0000000000000000] 
    38 00000072 B800000000              	mov rax, 0
    39 00000077 6A00                    	push 0x0
    40 00000079 E8(00000000)            	call printf
    41 0000007E C9                      	leave
    42 0000007F C3                      	ret	
    43                                  ;---------------------------------------------------------------------------											
    44                                  lfunc:	
    45 00000080 55                      	push rbp
    46 00000081 4889E5                    	mov rbp,rsp
    47 00000084 4831C0                      xor rax,rax           ; clear rax (especially higher bits)
    48 00000087 8A06                        mov al,byte[rsi]      ; move content argument to al
    49 00000089 8807                    	mov [rdi], al         ; store al to memory 
    50 0000008B 8A02                        mov al, byte[rdx]          
    51 0000008D 884701                  	mov [rdi+1], al           
    52 00000090 8A01                        mov al, byte[rcx]
    53 00000092 884702                  	mov [rdi+2], al
    54 00000095 418A00                      mov al, byte[r8]
    55 00000098 884703                  	mov [rdi+3], al
    56 0000009B 418A01                      mov al, byte[r9]
    57 0000009E 884704                  	mov [rdi+4], al
    58 000000A1 4831DB                      xor rbx,rbx
    59 000000A4 488B4510                    mov rax, qword [rbp+16] ;initial stack + rip + rbp
    60 000000A8 8A18                        mov bl,[rax]
    61 000000AA 885F05                  	mov [rdi+5], bl
    62 000000AD 488B4518                    mov rax, qword [rbp+24]
    63 000000B1 8A18                        mov bl,[rax]
    64 000000B3 885F06                  	mov [rdi+6], bl
    65 000000B6 488B4520                    mov rax, qword [rbp+32]
    66 000000BA 8A18                        mov bl,[rax]
    67 000000BC 885F07                  	mov [rdi+7], bl
    68 000000BF 488B4528                    mov rax, qword [rbp+40]
    69 000000C3 8A18                        mov bl,[rax]
    70 000000C5 885F08                  	mov [rdi+8], bl
    71 000000C8 488B4530                    mov rax, qword [rbp+48]
    72 000000CC 8A18                        mov bl,[rax]
    73 000000CE 885F09                  	mov [rdi+9], bl
    74 000000D1 B300                        mov bl,0
    75 000000D3 885F0A                  	mov [rdi+10], bl
    76 000000D6 4889EC                  	mov rsp,rbp
    77 000000D9 5D                      	pop rbp
    78 000000DA C3                      	ret									
