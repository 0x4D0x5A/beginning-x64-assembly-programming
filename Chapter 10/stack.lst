     1                                  ; stack.asm
     2                                  BITS 64:
     3                                  extern printf
     4                                  section .data							
     5 00000000 414243444500            	strng 		db	"ABCDE",0
     6                                  	strngLen	equ	$ - strng-1		; stringlength without 10 and 0
     7 00000006 546865206F72696769-       	fmt1    	db  "The original string: %s",10,0
     7 0000000F 6E616C20737472696E-
     7 00000018 673A2025730A00     
     8 0000001F 546865207265766572-      	fmt2    	db  "The reversed string: %s",10,0
     8 00000028 73656420737472696E-
     8 00000031 673A2025730A00     
     9                                  section .bss
    10                                  section .text							
    11                                  	global main						
    12                                  main:
    13 00000000 55                          push rbp
    14 00000001 4889E5                      mov rbp,rsp
    15                                  
    16                                  ; Print the original string
    17 00000004 48BF-                       mov		rdi, fmt1
    17 00000006 [0600000000000000] 
    18 0000000E 48BE-                       mov    	rsi, strng
    18 00000010 [0000000000000000] 
    19 00000018 B800000000                  mov		rax, 0		
    20 0000001D E8(00000000)                call  	printf		
    21                                  
    22                                  ;push the string char per char on the stack    
    23 00000022 4831C0                      xor 	rax, rax            
    24 00000025 48BB-                   	mov 	rbx, strng		; address of strng in rbx
    24 00000027 [0000000000000000] 
    25 0000002F B905000000              	mov 	rcx, strngLen	; length in rcx counter		
    26 00000034 41BC00000000            	mov 	r12, 0		; use r12 as pointer
    27                                  
    28                                  pushLoop:
    29                                  ; push char per char on the stack
    30 0000003A 428A0423                	mov 	al, byte [rbx+r12] ; move char into rax
    31 0000003E 50                          push 	rax			;push rax on the stack	
    32 0000003F 49FFC4                  	inc 	r12			; increase char pointer with 1
    33 00000042 E2F6                    	loop 	pushLoop		; continue loop
    34                                  
    35                                  ;pop the string char per char from the stack
    36                                  ;this will reverse the original string 
    37 00000044 48BB-                   	mov 	rbx, strng		; address of strng in rbx
    37 00000046 [0000000000000000] 
    38 0000004E B905000000              	mov 	rcx, strngLen	; length in rcx counter	
    39 00000053 41BC00000000            	mov 	r12, 0		; use r12 as pointer
    40                                  
    41                                  popLoop:
    42 00000059 58                      	pop 	rax			; pop a char from the stack
    43 0000005A 42880423                	mov 	byte [rbx+r12], al ;move the popped char into strng
    44 0000005E 49FFC4                  	inc 	r12			; increase char pointer with 1
    45 00000061 E2F6                    	loop 	popLoop		; continue loop
    46 00000063 42C6042300                  mov 	byte [rbx+r12],0        ; terminate string with 0
    47                                  
    48                                  ; Print the reversed string
    49 00000068 48BF-                       mov		rdi, fmt2
    49 0000006A [1F00000000000000] 
    50 00000072 48BE-                       mov   	rsi, strng
    50 00000074 [0000000000000000] 
    51 0000007C B800000000                  mov		rax, 0		
    52 00000081 E8(00000000)                call   	printf	                
    53                                  
    54 00000086 4889EC                      mov 	rsp,rbp
    55 00000089 5D                          pop 	rbp
    56 0000008A C3                          ret
