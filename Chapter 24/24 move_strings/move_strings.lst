     1                                  ; move_strings.asm
     2                                  BITS 64:
     3                                  %macro prnt 2
     4                                      mov     rax, 1		; 1 = write		
     5                                      mov     rdi, 1		; 1 = to stdout			
     6                                      mov     rsi, %1		; %1 = arg 1			
     7                                      mov     rdx, %2		; %2 = arg 2		
     8                                      syscall
     9                                  	mov rax, 1
    10                                  	mov rdi, 1
    11                                  	mov rsi, NL
    12                                  	mov rdx, 1
    13                                      syscall
    14                                  
    15                                  %endmacro
    16                                  
    17                                  section .data							
    18                                  	length	equ 95
    19 00000000 0A                      	NL db 0xa
    20 00000001 6D795F737472696E67-     	string1 db "my_string of ASCII:"
    20 0000000A 206F66204153434949-
    20 00000013 3A                 
    21 00000014 0A6D795F737472696E-     	string2 db 10,"my_string of zeros:"
    21 0000001D 67206F66207A65726F-
    21 00000026 733A               
    22 00000028 0A6D795F737472696E-     	string3 db 10,"my_string of ones:"
    22 00000031 67206F66206F6E6573-
    22 0000003A 3A                 
    23 0000003B 0A616761696E206D79-     	string4 db 10,"again my_string of ASCII:"
    23 00000044 5F737472696E67206F-
    23 0000004D 662041534349493A   
    24 00000055 0A636F7079206D795F-     	string5 db 10,"copy my_string to other_string:"
    24 0000005E 737472696E6720746F-
    24 00000067 206F746865725F7374-
    24 00000070 72696E673A         
    25 00000075 0A7265766572736520-     	string6 db 10,"reverse copy my_string to other_string:"
    25 0000007E 636F7079206D795F73-
    25 00000087 7472696E6720746F20-
    25 00000090 6F746865725F737472-
    25 00000099 696E673A           
    26                                  section .bss
    27 00000000 <res 5Fh>                       my_string  resb	length
    28 0000005F <res 5Fh>               	other_string resb length
    29                                  
    30                                  section .text							
    31                                  	global main						
    32                                  main:
    33 00000000 55                      push	rbp
    34 00000001 4889E5                  mov 	rbp, rsp
    35                                  ;-----------------------------------------------------------------------
    36                                  ;fill the string with printable ascii characters
    37                                  		prnt string1,18
     4 00000004 B801000000          <1>  mov rax, 1
     5 00000009 BF01000000          <1>  mov rdi, 1
     6 0000000E 48BE-               <1>  mov rsi, %1
     6 00000010 [0100000000000000]  <1>
     7 00000018 BA12000000          <1>  mov rdx, %2
     8 0000001D 0F05                <1>  syscall
     9 0000001F B801000000          <1>  mov rax, 1
    10 00000024 BF01000000          <1>  mov rdi, 1
    11 00000029 48BE-               <1>  mov rsi, NL
    11 0000002B [0000000000000000]  <1>
    12 00000033 BA01000000          <1>  mov rdx, 1
    13 00000038 0F05                <1>  syscall
    14                              <1> 
    38 0000003A B820000000              		mov rax,32
    39 0000003F 48BF-                   		mov rdi,my_string
    39 00000041 [0000000000000000] 
    40 00000049 B95F000000              		mov rcx, length
    41 0000004E 8807                    str_loop1:	mov byte[rdi], al		; the simple method
    42 00000050 48FFC7                  		inc rdi
    43 00000053 FEC0                            	inc al
    44 00000055 E2F7                    		loop str_loop1
    45                                  		prnt my_string,length
     4 00000057 B801000000          <1>  mov rax, 1
     5 0000005C BF01000000          <1>  mov rdi, 1
     6 00000061 48BE-               <1>  mov rsi, %1
     6 00000063 [0000000000000000]  <1>
     7 0000006B BA5F000000          <1>  mov rdx, %2
     8 00000070 0F05                <1>  syscall
     9 00000072 B801000000          <1>  mov rax, 1
    10 00000077 BF01000000          <1>  mov rdi, 1
    11 0000007C 48BE-               <1>  mov rsi, NL
    11 0000007E [0000000000000000]  <1>
    12 00000086 BA01000000          <1>  mov rdx, 1
    13 0000008B 0F05                <1>  syscall
    14                              <1> 
    46                                  ;-----------------------------------------------------------------------
    47                                  ;fill the string with ascii 0's
    48                                  		prnt string2,20
     4 0000008D B801000000          <1>  mov rax, 1
     5 00000092 BF01000000          <1>  mov rdi, 1
     6 00000097 48BE-               <1>  mov rsi, %1
     6 00000099 [1400000000000000]  <1>
     7 000000A1 BA14000000          <1>  mov rdx, %2
     8 000000A6 0F05                <1>  syscall
     9 000000A8 B801000000          <1>  mov rax, 1
    10 000000AD BF01000000          <1>  mov rdi, 1
    11 000000B2 48BE-               <1>  mov rsi, NL
    11 000000B4 [0000000000000000]  <1>
    12 000000BC BA01000000          <1>  mov rdx, 1
    13 000000C1 0F05                <1>  syscall
    14                              <1> 
    49 000000C3 B830000000              		mov rax,48
    50 000000C8 48BF-                   		mov rdi,my_string
    50 000000CA [0000000000000000] 
    51 000000D2 B95F000000              		mov rcx, length
    52 000000D7 AA                      str_loop2:	stosb				; no inc rdi needed anymore
    53 000000D8 E2FD                    		loop str_loop2
    54                                  		prnt my_string,length
     4 000000DA B801000000          <1>  mov rax, 1
     5 000000DF BF01000000          <1>  mov rdi, 1
     6 000000E4 48BE-               <1>  mov rsi, %1
     6 000000E6 [0000000000000000]  <1>
     7 000000EE BA5F000000          <1>  mov rdx, %2
     8 000000F3 0F05                <1>  syscall
     9 000000F5 B801000000          <1>  mov rax, 1
    10 000000FA BF01000000          <1>  mov rdi, 1
    11 000000FF 48BE-               <1>  mov rsi, NL
    11 00000101 [0000000000000000]  <1>
    12 00000109 BA01000000          <1>  mov rdx, 1
    13 0000010E 0F05                <1>  syscall
    14                              <1> 
    55                                  ;-----------------------------------------------------------------------
    56                                  ;fill the string with ascii 1's
    57                                  		prnt string3,19
     4 00000110 B801000000          <1>  mov rax, 1
     5 00000115 BF01000000          <1>  mov rdi, 1
     6 0000011A 48BE-               <1>  mov rsi, %1
     6 0000011C [2800000000000000]  <1>
     7 00000124 BA13000000          <1>  mov rdx, %2
     8 00000129 0F05                <1>  syscall
     9 0000012B B801000000          <1>  mov rax, 1
    10 00000130 BF01000000          <1>  mov rdi, 1
    11 00000135 48BE-               <1>  mov rsi, NL
    11 00000137 [0000000000000000]  <1>
    12 0000013F BA01000000          <1>  mov rdx, 1
    13 00000144 0F05                <1>  syscall
    14                              <1> 
    58 00000146 B831000000              		mov rax, 49
    59 0000014B 48BF-                   		mov rdi,my_string
    59 0000014D [0000000000000000] 
    60 00000155 B95F000000              		mov rcx, length
    61 0000015A F3AA                            	rep stosb			; no inc rdi and no loop needed anymore
    62                                  		prnt my_string,length
     4 0000015C B801000000          <1>  mov rax, 1
     5 00000161 BF01000000          <1>  mov rdi, 1
     6 00000166 48BE-               <1>  mov rsi, %1
     6 00000168 [0000000000000000]  <1>
     7 00000170 BA5F000000          <1>  mov rdx, %2
     8 00000175 0F05                <1>  syscall
     9 00000177 B801000000          <1>  mov rax, 1
    10 0000017C BF01000000          <1>  mov rdi, 1
    11 00000181 48BE-               <1>  mov rsi, NL
    11 00000183 [0000000000000000]  <1>
    12 0000018B BA01000000          <1>  mov rdx, 1
    13 00000190 0F05                <1>  syscall
    14                              <1> 
    63                                  ;-----------------------------------------------------------------------
    64                                  ;fill the string again with printable ascii characters
    65                                  		prnt string4,26
     4 00000192 B801000000          <1>  mov rax, 1
     5 00000197 BF01000000          <1>  mov rdi, 1
     6 0000019C 48BE-               <1>  mov rsi, %1
     6 0000019E [3B00000000000000]  <1>
     7 000001A6 BA1A000000          <1>  mov rdx, %2
     8 000001AB 0F05                <1>  syscall
     9 000001AD B801000000          <1>  mov rax, 1
    10 000001B2 BF01000000          <1>  mov rdi, 1
    11 000001B7 48BE-               <1>  mov rsi, NL
    11 000001B9 [0000000000000000]  <1>
    12 000001C1 BA01000000          <1>  mov rdx, 1
    13 000001C6 0F05                <1>  syscall
    14                              <1> 
    66 000001C8 B820000000              		mov rax,32
    67 000001CD 48BF-                   		mov rdi,my_string
    67 000001CF [0000000000000000] 
    68 000001D7 B95F000000              		mov rcx, length
    69 000001DC 8807                    str_loop3:	mov byte[rdi], al		; the simple method
    70 000001DE 48FFC7                  		inc rdi
    71 000001E1 FEC0                          	inc al
    72 000001E3 E2F7                    		loop str_loop3
    73                                  		prnt my_string,length
     4 000001E5 B801000000          <1>  mov rax, 1
     5 000001EA BF01000000          <1>  mov rdi, 1
     6 000001EF 48BE-               <1>  mov rsi, %1
     6 000001F1 [0000000000000000]  <1>
     7 000001F9 BA5F000000          <1>  mov rdx, %2
     8 000001FE 0F05                <1>  syscall
     9 00000200 B801000000          <1>  mov rax, 1
    10 00000205 BF01000000          <1>  mov rdi, 1
    11 0000020A 48BE-               <1>  mov rsi, NL
    11 0000020C [0000000000000000]  <1>
    12 00000214 BA01000000          <1>  mov rdx, 1
    13 00000219 0F05                <1>  syscall
    14                              <1> 
    74                                  ;-----------------------------------------------------------------------
    75                                  ;copy my_string to other_string	
    76                                  		prnt string5,32
     4 0000021B B801000000          <1>  mov rax, 1
     5 00000220 BF01000000          <1>  mov rdi, 1
     6 00000225 48BE-               <1>  mov rsi, %1
     6 00000227 [5500000000000000]  <1>
     7 0000022F BA20000000          <1>  mov rdx, %2
     8 00000234 0F05                <1>  syscall
     9 00000236 B801000000          <1>  mov rax, 1
    10 0000023B BF01000000          <1>  mov rdi, 1
    11 00000240 48BE-               <1>  mov rsi, NL
    11 00000242 [0000000000000000]  <1>
    12 0000024A BA01000000          <1>  mov rdx, 1
    13 0000024F 0F05                <1>  syscall
    14                              <1> 
    77 00000251 48BE-                   		mov rsi,my_string			;rsi source
    77 00000253 [0000000000000000] 
    78 0000025B 48BF-                   		mov rdi,other_string		;rdi destination
    78 0000025D [5F00000000000000] 
    79 00000265 B95F000000              		mov rcx, length
    80 0000026A F3A4                    		rep movsb
    81                                  		prnt other_string,length
     4 0000026C B801000000          <1>  mov rax, 1
     5 00000271 BF01000000          <1>  mov rdi, 1
     6 00000276 48BE-               <1>  mov rsi, %1
     6 00000278 [5F00000000000000]  <1>
     7 00000280 BA5F000000          <1>  mov rdx, %2
     8 00000285 0F05                <1>  syscall
     9 00000287 B801000000          <1>  mov rax, 1
    10 0000028C BF01000000          <1>  mov rdi, 1
    11 00000291 48BE-               <1>  mov rsi, NL
    11 00000293 [0000000000000000]  <1>
    12 0000029B BA01000000          <1>  mov rdx, 1
    13 000002A0 0F05                <1>  syscall
    14                              <1> 
    82                                  ;-----------------------------------------------------------------------
    83                                  ;reverse copy my_string to other_string	
    84                                  		prnt string6,40
     4 000002A2 B801000000          <1>  mov rax, 1
     5 000002A7 BF01000000          <1>  mov rdi, 1
     6 000002AC 48BE-               <1>  mov rsi, %1
     6 000002AE [7500000000000000]  <1>
     7 000002B6 BA28000000          <1>  mov rdx, %2
     8 000002BB 0F05                <1>  syscall
     9 000002BD B801000000          <1>  mov rax, 1
    10 000002C2 BF01000000          <1>  mov rdi, 1
    11 000002C7 48BE-               <1>  mov rsi, NL
    11 000002C9 [0000000000000000]  <1>
    12 000002D1 BA01000000          <1>  mov rdx, 1
    13 000002D6 0F05                <1>  syscall
    14                              <1> 
    85 000002D8 B830000000              		mov rax, 48			;clear other_string
    86 000002DD 48BF-                   		mov rdi,other_string
    86 000002DF [5F00000000000000] 
    87 000002E7 B95F000000              		mov rcx, length
    88 000002EC F3AA                        		rep stosb			
    89 000002EE 488D3425[5B000000]      		lea rsi,[my_string+length-4]
    90 000002F6 488D3C25[BE000000]      		lea rdi,[other_string+length]
    91 000002FE B91B000000              		mov rcx, 27			;copy only ten characters
    92 00000303 FD                      		std					;std sets DF, cld clears DF
    93 00000304 F3A4                    		rep movsb
    94                                  		prnt other_string,length
     4 00000306 B801000000          <1>  mov rax, 1
     5 0000030B BF01000000          <1>  mov rdi, 1
     6 00000310 48BE-               <1>  mov rsi, %1
     6 00000312 [5F00000000000000]  <1>
     7 0000031A BA5F000000          <1>  mov rdx, %2
     8 0000031F 0F05                <1>  syscall
     9 00000321 B801000000          <1>  mov rax, 1
    10 00000326 BF01000000          <1>  mov rdi, 1
    11 0000032B 48BE-               <1>  mov rsi, NL
    11 0000032D [0000000000000000]  <1>
    12 00000335 BA01000000          <1>  mov rdx, 1
    13 0000033A 0F05                <1>  syscall
    14                              <1> 
    95 0000033C C9                      leave
    96 0000033D C3                      ret				
